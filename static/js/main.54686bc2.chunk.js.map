{"version":3,"sources":["Components/QuestionButton.js","Components/MarksComponent.js","Components/SectionComponent.js","Components/axiosConfig.js","Components/MyJumbotron.js","Components/GradingPage.js","Components/LoginPage.js","Components/TestCreationPage.js","Components/DashboardSectionComponent.js","Components/DashboardPage.js","App.js","reportWebVitals.js","index.js"],"names":["QuestionButton","props","state","hierarchy","ancestor","isExpanded","isVisible","qno","width","isChild","handleButtonClick","handleMarkState","Object","keys","length","Array","renderChildButtons","bind","children","this","map","subquestion","style","display","flexDirection","flexWrap","alignContent","Button","className","color","onClick","nextProps","prevState","Component","MarksComponent","isSubQuestionVisible","subQuestionMarks","totalMarksAwarded","totalMarks","border","margin","type","id","min","max","name","value","parseInt","document","getElementById","total","window","alert","SectionComponent","heading","data","photoIsOpen","currQno","handwritingVerified","renderButton","renderSectionElements","renderQuestionButton","event","setState","QpPattern","question","segment","undefined","src","height","imgs","currImg","isOpen","onClose","showThumbnails","backdropCloseable","console","log","handwriting_message","handwriting_color","placeholder","s","charAt","toUpperCase","slice","newState","axios","defaults","xsrfHeaderName","xsrfCookieName","withCredentials","baseURL","MyJumbotron","capitalize","nav_history","selectedFields","forEach","element","selectedType","availableTypes","curType","Navbar","bg","variant","goBack","disabled","float","marginRight","Brand","Nav","dontRenderButton","addBtnHandler","marginLeft","align","weight","ReactSession","get","remove","history","push","GradingPage","segments","test","dashboardstate","location","imageUrl","split","shift","marks","grade_tree","then","res","status","newDashboardstate","pop","pathname","withRouter","LoginPage","handleChange","e","target","handleSubmit","preventDefault","post","username","password","authValue","auth","set","catch","err","Form","onSubmit","Group","size","controlId","Label","Control","autoFocus","onChange","block","TestCreationPage","qp","expanded","dashboardState","testname","testdate","zipfile","renderAddButton","renderDeleteButton","constructFinalQpTree","createQp","handleDataChange","isEmpty","obj","finalQp","qpContent","JSON","stringify","qpBlob","Blob","formdata","FormData","append","getElementsByName","files","statusText","tree","finalqp","node","currentQno","path","borderRadius","addNodeUnderParent","treeData","newNode","parentKey","getNodeKey","treeIndex","rowInfo","removeNodeAtPath","ignoreCollapsed","FormGroup","Input","required","newQPTree","generateNodeProps","extendedNode","title","fontSize","readOnly","changeNodeAtPath","buttons","accept","DashboardSectionComponent","clickHandler","populateData","toastHandler","deleteBtn","stopPropagation","delete","toString","message","Card","toLowerCase","text","Img","position","alt","Body","Text","fontWeight","fontStretch","fontStyle","lineHeight","letterSpacing","textAlign","DashboardPage","profName","popup","toasts","x","togglePopup","clickhandler","addCourseBtn","newToasts","newSelectedfields","replace","params","formData","aria-live","aria-atomic","minHeight","Modal","ModalHeader","ModalBody","ModalFooter","top","right","index","Toast","splice","show","delay","autohide","Header","paddingLeft","LoginRoute","isLoggedIn","to","exact","component","PrivateRoute","App","setStoreType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.54686bc2.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport {Button} from \"reactstrap\"\nimport \"./index.css\"\n\n\nexport default class QuestionButton extends Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            hierarchy : props.hierarchy,\n            ancestor : props.ancestor,\n            isExpanded : false,\n            isVisible : props.isVisible,\n            qno : props.qno,\n            width : props.width,\n            isChild : false,\n            handleButtonClick : props.handleButtonClick,\n            handleMarkState : props.handleMarkState\n        }\n\n        if(Object.keys(this.state.hierarchy).length==0 || this.state.hierarchy instanceof Array) {\n            this.state.isChild = true;\n        }\n        \n        this.renderChildButtons = this.renderChildButtons.bind(this);\n        this.handleButtonClick = this.state.handleButtonClick;\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        if(nextProps.isVisible!=prevState.isVisible){\n            return {\n                hierarchy : prevState.hierarchy,\n                ancestor : prevState.ancestor,\n                isExpanded : false,\n                isVisible : nextProps.isVisible,\n                qno : prevState.qno,\n                width : prevState.width\n            }\n        }\n\n        return null\n    }\n\n    renderChildButtons(){\n        var children = Object.keys(this.state.hierarchy);\n\n        if(children.length===0 || this.state.hierarchy instanceof Array) {\n            return null;\n        }\n\n        return children.map(subquestion=>{\n            return <QuestionButton \n                hierarchy = {this.state.hierarchy[subquestion]}\n                ancestor = {this.state.ancestor + \"-\" + this.state.qno}\n                isVisible = {this.state.isExpanded}\n                qno = {subquestion}\n                width = {\"60%\"}\n                handleButtonClick = {this.state.handleButtonClick}\n                handleMarkState = {this.state.handleMarkState}\n            />\n        })\n    }\n\n    render(){\n        return (\n            <div style={{ display : \"flex\" , flexDirection : \"column\" , flexWrap : \"wrap\" ,alignContent : \"flex-end\"}}>\n                {this.state.isVisible&&\n                    <Button\n                        className = \"sectionbtn\"\n                        color=\"secondary\"   \n                        style={{ width : this.state.width}}\n                        onClick={this.handleButtonClick}\n                        >\n                        {this.state.qno}\n                    </Button>\n                }   \n                {this.renderChildButtons()}\n            </div>\n        )\n    }\n}","\nimport React , {Component} from \"react\"\nimport {Button} from \"reactstrap\"\nexport default class MarksComponent extends Component{\n\n    constructor(props){\n\n        super(props)\n        \n        this.state = {\n            isSubQuestionVisible : props.isSubQuestionVisible,\n            qno : props.qno,\n            subQuestionMarks : props.subQuestionMarks,\n            totalMarksAwarded : props.totalMarksAwarded,\n            totalMarks : props.totalMarks\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n            var newState = {\n                isSubQuestionVisible : nextProps.isSubQuestionVisible,\n                qno : nextProps.qno,\n                subQuestionMarks :  nextProps.subQuestionMarks,\n                totalMarksAwarded : nextProps.totalMarksAwarded,\n                totalMarks : nextProps.totalMarks\n            }\n            return newState\n    }\n\n    render(){\n        return (\n            <div style={{border : \"5px solid black\" , margin : \"10%\"}}>\n                Marks :\n                {this.state.isSubQuestionVisible&&<div><span>{this.state.qno}:</span>\n                <input type=\"number\" id={this.state.qno} min=\"0\" max={this.state.subQuestionMarks} name={this.state.qno} style={{ width : \"50%\"}}/>/{this.state.subQuestionMarks}</div>}\n                {/* {<div>Total: {this.state.totalMarksAwarded}/{this.state.totalMarks}</div>} */}\n                {this.state.isSubQuestionVisible&&<Button \n                    color=\"secondary\" \n                    className=\"sectionbtn\" \n                    onClick={()=>{\n                        var value = parseInt(document.getElementById(this.state.qno).value);\n                        var total = parseInt(this.state.subQuestionMarks);\n                        if(value > total || value < 0)\n                            window.alert(\"Marks entered is invalid for the question!\");\n                        else\n                            window.alert(\"Entered : \"+value+\" / \"+total);\n                    }}\n                    >Enter marks</Button>\n                }\n            </div>\n        )\n\n    }\n}\n","import React, { Component } from \"react\"\nimport \"./index.css\"\nimport { Button } from \"reactstrap\"\nimport ImgsViewer from \"react-images-viewer\"\nimport QuestionButton from \"./QuestionButton\"\nimport MarksComponent from \"./MarksComponent\"\n\nexport default class SectionComponent extends Component {\n\n    constructor(props) {\n\n        super(props)\n\n        this.state = {\n            width: props.width,\n            heading: props.heading,\n            data: props.data,\n            photoIsOpen: false,\n            isSubQuestionVisible: props.isSubQuestionVisible,\n            currQno: props.currQno,\n            subQuestionMarks: props.subQuestionMarks,\n            handleMarkState: props.handleMarkState,\n            handwritingVerified: props.handwritingVerified,\n        }\n\n        this.renderButton = this.renderButton.bind(this);\n        this.renderSectionElements = this.renderSectionElements.bind(this);\n        this.renderQuestionButton = this.renderQuestionButton.bind(this);\n\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n\n        // if(prevState.heading === 'questions'){\n        // console.log(nextProps);}\n\n        let newState = {\n            width: nextProps.width,\n            heading: nextProps.heading,\n            isSubQuestionVisible: nextProps.isSubQuestionVisible,\n            currQno: nextProps.currQno,\n            subQuestionMarks: nextProps.subQuestionMarks\n        }\n\n        if (nextProps.data !== undefined && nextProps.data !== null) {\n            newState['data'] = nextProps.data\n        }\n\n        return newState\n    }\n\n\n    handleButtonClick(event) {\n        var isVisible = this.state.isChild\n        this.state.handleMarkState(isVisible, this.state.ancestor + '-' + this.state.qno, this.state.hierarchy);\n        this.setState((prevState) => {\n            return ({\n                isExpanded: !prevState.isExpanded\n            })\n        })\n    }\n\n    renderQuestionButton() {\n        if (this.state.data.QpPattern instanceof Array) return null;\n\n        return Object.keys(this.state.data.QpPattern).map(question => {\n            return <QuestionButton\n                ancestor=\"Q\"\n                hierarchy={this.state.data.QpPattern[question]}\n                qno={question}\n                isVisible={true}\n                width={\"50%\"}\n                handleButtonClick={this.handleButtonClick}\n                handleMarkState={this.state.handleMarkState}\n            />\n        })\n    }\n\n    renderButton(segment) {\n        return (<Button className=\"sectionbtn\" color=\"secondary\" key={segment} >{segment}</Button>)\n    }\n\n    renderSectionElements() {\n\n        if (this.state.data == undefined || this.state.data == null) return null;\n\n        switch (this.state.heading) {\n            case \"segments\":\n                return this.state.data.map(this.renderButton)\n            case \"questions\":\n                return this.renderQuestionButton()\n            case \"answer scripts\":\n                return <div>\n                    <img\n                        onClick={() => { this.setState({ photoIsOpen: true }) }}\n                        src={this.state.data}\n                        height=\"100%\"\n                        width=\"100%\"\n                    />\n                    <ImgsViewer\n                        imgs={[{ src: this.state.data }]}\n                        currImg={this.state.currImg}\n                        isOpen={this.state.photoIsOpen}\n                        onClose={() => { this.setState({ photoIsOpen: false }) }}\n                        showThumbnails={true}\n                        backdropCloseable={true}\n                    />\n                </div>\n            case \"marks allocation\":\n                console.log(this.state.handwritingVerified)\n                let handwriting_message = \"Handwriting not verified\";\n                let handwriting_color = \"black\";\n                if(this.state.handwritingVerified){\n                    handwriting_color = \"green\";\n                    handwriting_message = \"Handwriting matches student\";}\n                else if(this.state.handwritingVerified === false) {\n                    handwriting_color = \"red\";\n                    handwriting_message = \"Handwriting does not match student\";}\n                return <div>\n                        \n                        <MarksComponent\n                        isSubQuestionVisible={this.state.isSubQuestionVisible}\n                        qno={this.state.currQno}\n                        subQuestionMarks={this.state.subQuestionMarks}\n                        totalMarksAwarded=\"70\"\n                        totalMarks=\"100\"\n                    />\n\n                    <textarea\n                        name=\"marks remarks\"\n                        placeholder=\"Remarks for the answers.\"\n                        height=\"100%\"\n                        width=\"100%\"\n                    />\n                     <p  style={{color: handwriting_color}}>\n                        {handwriting_message}\n                    </p>\n                        </div>\n            default:\n                return <div>yet to be designed</div>\n\n        }\n    }\n\n    render() {\n        const capitalize = (s) => {\n            if (typeof s !== 'string') return ''\n            return s.charAt(0).toUpperCase() + s.slice(1)\n        }\n        return (\n            <div className=\"section\" style={{ width: this.state.width }}>\n                {capitalize(this.state.heading)}\n                <div className=\"sectionButtonPanel\">\n                    {this.renderSectionElements()}\n                </div>\n            </div>\n        )\n    }\n}","import axios from 'axios'\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\"\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.withCredentials = true\naxios.defaults.baseURL = \"http://127.0.0.1:8000/\"\nexport default axios","import React, { Component } from \"react\"\nimport { ReactSession } from \"react-client-session\";\n// import { Button, Jumbotron } from \"reactstrap\";\nimport { Button, Navbar, Nav, Card } from 'react-bootstrap'\n\nclass MyJumbotron extends Component {\n    // const [dropdownOpen, setDropdownOpen] = useState(false);\n    // const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    // console.log(props);\n\n    render() {\n        const capitalize = (s) => {\n            if (typeof s !== 'string') return ''\n            return s.charAt(0).toUpperCase() + s.slice(1)\n        }\n        // console.log(this.props)\n        let variant = 'dark';\n        let nav_history = \"\";\n        this.props.state.selectedFields.forEach(element => {\n            if (nav_history === \"\") nav_history += element.name\n            else nav_history += (\" - \" + element.name)\n        });\n        let selectedType = this.props.state.availableTypes[this.props.state.curType]\n        // if (nav_history === \"\") nav_history = \"Home\"\n        // console.log(this.props.state.selectedFields);\n        return <div>\n            <Navbar bg=\"dark\" variant=\"dark\">\n\n                {this.props.state.curType !== 0 &&\n                    <Button variant='primary'\n                        onClick={this.props.goBack}\n                        disabled={this.props.state.curType === 0}\n                        style={{ float: \"left\", marginRight: \"1rem\" }}\n                    > Back </Button>\n                }\n\n                <Navbar.Brand>{nav_history}</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    {this.props.dontRenderButton != true && <Button\n                        variant=\"primary\"\n                        onClick={this.props.addBtnHandler}\n                        style={{ marginLeft: \"10px\" }}\n                    > Add {capitalize(this.props.state.availableTypes[this.props.state.curType])}</Button>}\n                        \n                </Nav>\n                {selectedType && <Navbar.Brand style={{marginRight: \"43rem\",  align:\"center\", weight:\"bold\"}}>{capitalize(selectedType)+\" Dashboard\"}</Navbar.Brand>}\n\n\n                {ReactSession.get('userdata') && <Navbar.Brand>{ReactSession.get('userdata')['name']}</Navbar.Brand>}\n                {ReactSession.get('userdata') && <Button\n                    variant=\"danger\"\n                    onClick={() => { ReactSession.remove('userdata'); this.props.history.push('/login') }}\n                    style={{ float: \"right\" }}\n                > Logout </Button>}\n            </Navbar>\n        </div>\n        // <Jumbotron fluid bg={variant.toLowerCase()} >\n        // {/* width: \"100vw\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\"  */}\n        //             <div>\n        //                 <div style={{ width: \"100vw\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\"  }}>\n        //                     <div> <Button variant='primary' \n        //                             onClick={this.props.goBack} \n        //                             disabled={this.props.state.curType === 0}\n        //                             style = {{float : \"left\"}}\n        //                             > Back </Button></div>\n\n        //                     {this.props.state.selectedFields.map((indvField)=>{return <div>{indvField.name}</div>})}\n        //                     {/* <div style = {{ display : \"flex\" , flexDirection : \"row\" , borderWidth : \"5px\", borderStyle : \"solid\" , borderColor : \"lightblue\" , borderRadius : \"10px\"}}>\n        //                         <div><h4>{ReactSession.get('userdata')['name']}</h4></div>\n        //                         <div > <Button \n        //                                     variant=\"danger\"\n        //                                     onClick={() => { ReactSession.remove('userdata'); this.props.history.push('/login') }}\n        //                                     style = {{float : \"right\"}}\n        //                                     > Logout </Button></div>\n        //                     </div> */}\n\n        //                 </div>\n        //                 <div style={{display : \"inline-block\" , marginLeft : \"45vw\"}}>\n        //                         <div><h5>{this.props.state.availableTypes[this.props.state.curType]}</h5></div>\n        //                          <div > {this.props.dontRenderButton!=true && <Button \n        //                                                                     variant=\"primary\" \n        //                                                                         onClick={this.props.addBtnHandler}\n        //                                                                         style = {{ marginLeft : \"10px\"}}\n        //                                                                         > Add </Button>}</div>\n        //                 </div>\n        //             </div>\n        //         </Jumbotron>\n    }\n}\n\nexport default MyJumbotron;","import React , {Component} from \"react\"\nimport SectionComponent from \"./SectionComponent\";\nimport axios from './axiosConfig'\n// import test from \"../Data/getSubmissionTest.json\"\n// import image from \"../Data/2_2.jpg\";\nimport MyJumbotron from \"./MyJumbotron\";\nimport { withRouter } from \"react-router-dom\";\n\nclass GradingPage extends Component{\n\n    constructor(props){\n\n        super(props);\n    \n        this.state = {\n            segments : [\"original\" , \"paragraphs\" , \"tables\" , \"images\"],\n            test : undefined,\n            isSubQuestionVisible : false,\n            currQno : undefined,\n            subQuestionMarks : undefined,\n            dashboardstate : this.props.location.state,\n            imageUrl : undefined,\n            data : this.props.location.data,\n        }\n        this.handleMarkState = this.handleMarkState.bind(this);\n        this.goBack = this.goBack.bind(this);\n        // this.getMarks = this.getMarks.bind(this);\n      }\n\n      // getMarks(tree,path){\n      //   if(path.length === 0) return tree;\n      //   let newPath = path.map(x=>x);\n      //   newPath.shift();\n      //   return this.getMarks(tree[path[0]],newPath);\n      // }\n    \n      handleMarkState(isSubQuestionVisible,currQno,data){\n        // console.log(data);\n\n        let path = currQno.split(\"-\")\n        path.shift();\n        // let marks = this.getMarks(this.state.qptree,path);\n        let marks = data[2];\n        let imageUrl = data[3];\n        // console.log(imageUrl)\n        this.setState({\n          isSubQuestionVisible : isSubQuestionVisible,\n          currQno : currQno,\n          subQuestionMarks : marks,\n          imageUrl : imageUrl\n        });\n      }\n    \n      componentDidMount(){\n        // TODO\n        // console.log(this.state.data)\n        axios.get(this.state.data.grade_tree)\n          .then(res=>{\n            // console.log(res)\n            if(res.status < 300 && res.status > 199){\n              this.setState({\n                test : {'QpPattern' : res.data}\n              })\n            }\n          })\n      }\n\n      goBack(){\n        let newDashboardstate = { ...this.state.dashboardstate};\n        newDashboardstate.curType --;\n        newDashboardstate.selectedFields.pop();\n\n        this.setState({ dashboardstate : newDashboardstate},()=>{\n          this.props.history.push({\n          pathname : '/',\n          state : this.state.dashboardstate\n          });\n        })\n      }\n    \n      render(){\n        // \"https://static.toiimg.com/photo/msid-67586673/67586673.jpg?3918697\"\n        console.log(this.state.data)\n        return (\n          <div>\n            <MyJumbotron state={this.state.dashboardstate} history={this.props.history} dontRenderButton={true} goBack={this.goBack}/>\n            <div className=\"App\">\n                <SectionComponent width=\"15%\" heading=\"questions\" data={this.state.test} handleMarkState ={this.handleMarkState} />\n                <SectionComponent width=\"15%\" heading=\"segments\" data={this.state.segments} />\n                <SectionComponent width=\"50%\" heading=\"answer scripts\" data={this.state.imageUrl}/>\n                {/* imaged need above  */}\n                <SectionComponent width=\"20%\" heading=\"marks allocation\" data=\"dummy\"\n                                  isSubQuestionVisible={this.state.isSubQuestionVisible}\n                                  currQno={this.state.currQno}\n                                  subQuestionMarks={this.state.subQuestionMarks}\n                                  handwritingVerified={this.state.data[\"handwriting_verified\"]}\n                                  />\n            </div>\n          </div>\n        );\n      \n      }\n\n}\n\nexport default withRouter(GradingPage);","import React, { Component } from 'react';\nimport '../App.css';\nimport { Form1, Input, Button1 } from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { ReactSession } from 'react-client-session';\nimport MyJumbotron from \"./MyJumbotron\";\nimport { Button, Jumbotron, Navbar, Nav, NavDropdown, Form, FormControl, Card } from 'react-bootstrap'\n\n//configured axios\nimport axios from './axiosConfig';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            auth: null\n        }\n\n        ReactSession.remove('userdata');\n\n        // this.props.history.replace('/login');   \n    }\n    // I got CSRF token missing error when I sent the request. So I think we need this.\n    // setCSRF = () => {\n    //     axios.get('api/set-csrf/').then(res => console.log(res))\n    // }\n\n    // testEndpoint = () => {\n    //     axios.get('/api/test-auth/').then(res => this.setState(\n    //         { endpoint: true }))\n    //         .catch(res => this.setState({ endpoint: false }))\n    // }\n\n    handleChange = (e) => {\n        // console.log(e.target.name, e.target.value);\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        axios.post('/api/login/',\n            {\n                username: this.state.username,\n                password: this.state.password\n            }\n        ).then(res => {\n            // console.log(res.data);\n            let authValue = typeof (res.data) == \"object\" ? true : false;\n            this.setState({ auth: authValue });\n        })\n            .then(() => {\n                if (this.state.auth) {\n                    axios.get('/api/me')\n                        .then(res => {\n                            // ReactSession.set(\"username\" , this.state.username);\n                            ReactSession.set(\"userdata\", res.data);\n                            this.props.history.push(\"/\");\n                        }).catch((err) => {\n                            console.log(err);\n                            // window.alert(\"error check console!\")\n                        })\n                }\n                else {\n                    window.alert(\"Login failed!\");\n                }\n            })\n            // .catch(res => this.setState({ auth: false }))\n            .catch((err) => { console.log(err); });\n    }\n\n    render() {\n        // return <div style={{ marginLeft: '20px' }}>\n        //     <div style={{ height: '50px' }}></div>\n        //     <button onClick={this.setCSRF}>Set CSRF Token</button>\n        //     <div>\n        //         {this.state.auth === null ? '' : (this.state.auth ? 'Login successful' : 'Login Failed')}\n        //     </div>\n\n        return <div>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand>Login Page</Navbar.Brand>\n\n            </Navbar><div className=\"page-with-form\">\n                <div className=\"Login\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group size=\"lg\" controlId=\"email\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                autoFocus\n                                type=\"text\"\n                                name=\"username\"\n                                value={this.state.username}\n                                onChange={this.handleChange} \n                            />\n                        </Form.Group>\n                        <Form.Group size=\"lg\" controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                value={this.state.password}\n                                onChange={this.handleChange} \n                            />\n                        </Form.Group>\n                        <Button block size=\"lg\" type=\"submit\">\n                            Login\n                        </Button>\n                    </Form>\n                </div>\n                {/* <Form onSubmit={this.handleSubmit}>\n                    <Input type=\"text\" name=\"username\" placeholder=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    <Input type=\"password\" name=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <Button color=\"primary\">log-in</Button>\n                </Form> */}\n            </div>\n        </div>\n    };\n}\n\nexport default withRouter(LoginPage);","import React, { Component } from \"react\";\nimport { Form, Input, Button, FormGroup, Modal , ModalBody , ModalFooter , ModalHeader} from \"reactstrap\";\nimport SortableTree, { addNodeUnderParent, removeNodeAtPath , changeNodeAtPath } from \"react-sortable-tree\";\nimport MyJumbotron from \"./MyJumbotron\";\n// import writeJsonFile from \"write-json-file\";\nimport FormData from 'form-data';\n\n// import JSONViewer from \"react-json-viewer\";\n// import JSONTree from \"react-json-tree\";\n// import JSONPretty from \"react-json-pretty\";\nimport axios from './axiosConfig';\n// import {withRouter} from \"react-router-dom\";\n\nclass TestCreationPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            qp: [{\n                qno : \"qp\" ,\n                marks : null,\n                expanded : true,\n                children : []\n                }],\n            dashboardState : this.props.location.state,\n            testname : null,\n            testdate : null,\n            zipfile : null\n        }\n\n        // this.state = {\n        //     qp: [{\n        //         qno : \"qp\" ,\n        //         marks : null,\n        //         expanded : true,\n        //         children : [\n        //                 {\n        //                     qno: \"1\",\n        //                     marks : 10,\n        //                     children: [ \n        //                         { qno: \"a\", marks : 10 , children : [] ,expanded: true }, \n        //                         { qno: \"b\", marks : 10 , children : [] ,expanded: true }\n        //                     ],\n        //                     expanded: true\n        //                 },\n        //                 {\n        //                     qno: \"2\",\n        //                     marks : 10,\n        //                     children : [],\n        //                     expanded: true\n        //                 }\n        //             ]\n        //     }],\n        //     popup : false\n        // }\n\n        this.renderAddButton = this.renderAddButton.bind(this);\n        this.renderDeleteButton = this.renderDeleteButton.bind(this);\n        this.constructFinalQpTree = this.constructFinalQpTree.bind(this);\n        this.createQp = this.createQp.bind(this);\n        this.handleDataChange = this.handleDataChange.bind(this);\n        // this.checkAndPing = this.checkAndPing.bind(this);\n        this.isEmpty = this.isEmpty.bind(this);\n\n        // this.togglePopup = this.togglePopup.bind(this);\n    }\n\n    // togglePopup(){\n    //     this.setState(prevState =>{\n    //         return { popup : !prevState.popup}\n    //     })\n    // }\n\n    isEmpty(obj){\n        if(obj === undefined || obj === null) return true;\n        let objKey = Object.keys(obj);\n        return objKey.length == 0;\n    }\n\n    handleDataChange(event){\n        let { name , value } = event.target;\n\n        this.setState({ [name] : value });\n    }\n\n    createQp(){\n\n        let finalQp = this.constructFinalQpTree(this.state.qp[0].children,\"\");\n\n        if(this.state.testname!=null && this.state.testdate!=null && this.state.zipfile != null && !this.isEmpty(finalQp)){\n                \n            // const qptree = Buffer.from(JSON.stringify(this.state.finalQp),'utf-8');\n            var qpContent = JSON.stringify(finalQp);\n            var qpBlob = new Blob([qpContent], { type  : \"application/json\"});    \n            const formdata = new FormData();\n\n            formdata.append('name' , document.getElementsByName('testname')[0].value);\n            formdata.append('date' , document.getElementsByName('testdate')[0].value);\n            formdata.append('qp_tree' , qpBlob , this.state.testname+'_qp_tree.json');\n            formdata.append('answer_scripts' , document.getElementsByName('zipfile')[0].files[0]);\n            formdata.append('course' , this.state.dashboardState.selectedFields[0].id);\n\n            axios.post('/api/tests/',formdata)\n                .then((res)=>{\n                    // console.log(res);\n                    if(res.status==200){\n                        window.alert('Test created !');\n                        this.props.history.push('/'); \n                    }\n                    else{\n                        window.alert(\"\" + res.status + res.statusText);\n                    }\n                })\n                .catch((err)=>{\n                    console.log(err);\n                })\n            return;\n            // console.log(document.getElementsByName('zipfile')[0].value);\n        }\n        \n        window.alert('Please fill all the fields and create Qp Tree if not created!');\n        \n    }\n\n    constructFinalQpTree(tree , ancestor){\n        let finalqp = {}\n\n        tree.forEach((node)=>{\n\n            let currentQno = ancestor === \"\" ? node.qno : ancestor + \"-\" + node.qno;\n            \n            if(node.children.length === 0){\n                finalqp[node.qno] = parseInt(node.marks); \n            }\n            else{\n                finalqp[node.qno] = this.constructFinalQpTree(node.children , currentQno);\n            }\n        })\n\n        return finalqp;\n    }\n\n    renderAddButton(node, path) {\n        // cancelling the prompt still create new child.\n        return <Button\n            color=\"primary\"\n            style={{ borderRadius: \"50%\" , marginLeft : \"5px\" , marginRight : \"5px\"}}\n            onClick={(e) => {\n                // let nextq = prompt(\"enter the new Question no.\" ,\"-\");\n                // let listOfChildren = node.children !== undefined ? node.children.map(child => child.title) : null;\n\n                // while (listOfChildren != null && listOfChildren.includes(nextq))\n                //     nextq = prompt(\"Duplicate Question no. encountered! Enter the new Question no.\",\"-\");\n                // nextq = Math.max(node.children) + 1;\n                this.setState({\n                    qp: addNodeUnderParent({\n                        treeData: this.state.qp,\n                        newNode: { qno: null, expanded: true , marks : null , children : [] },\n                        parentKey: path[path.length - 1],\n                        getNodeKey: ({ treeIndex }) => treeIndex\n                    }).treeData\n                });\n            }}\n        >+</Button>\n    }\n    renderDeleteButton(rowInfo) {\n        return <Button\n            color=\"secondary\"\n            style={{ borderRadius: \"50%\" , marginLeft : \"5px\" , marginRight : \"5px\"}}\n            onClick={(e) => {\n                let { node, treeIndex, path } = rowInfo;\n                this.setState({\n                    qp: removeNodeAtPath({\n                        treeData: this.state.qp,\n                        path: path,   // You can use path from here\n                        getNodeKey: ({treeIndex}) => treeIndex,\n                        ignoreCollapsed: false,\n                    })\n                })\n            }}\n        >-</Button>\n    }\n\n    render() {\n        // console.log(this.state.dashboardState);\n        return (\n            <div>\n                <MyJumbotron state = {this.state.dashboardState} history = {this.props.history} goBack = {()=>{this.props.history.push('/')}} dontRenderButton = {true}/>\n                <div className = \"page-with-form\">\n                <Form id='id'>\n                    <FormGroup>\n                        <Input name=\"testname\" type=\"text\" placeholder=\"Testname\" required={true} value={this.state.testname} onChange={this.handleDataChange}/>\n                        <Input name=\"testdate\" type=\"date\" placeholder=\"Test-date\" required={true} value = {this.state.testdate} onChange={this.handleDataChange}/>\n                        {/* <Input type=\"number\" placeholder=\"noOfQno\" /> */}\n                    </FormGroup>\n                    <div style = {{ height : '30vh'}}>\n                        <SortableTree\n                            treeData={this.state.qp}\n                            onChange={newQPTree => { this.setState({ newQPTree }); }}\n                            generateNodeProps={extendedNode => ({\n                                title: (\n                                    <div>\n                                    <input\n                                    placeholder = 'Q-no'\n                                    style={{ fontSize: '1.1rem' }}\n                                    value={extendedNode.node.qno}\n                                    readOnly = {extendedNode.node.qno === 'qp'}\n                                    onChange={event => {\n                                      const name = event.target.value;\n                  \n                                      this.setState(state => (\n                                          {\n                                            qp: changeNodeAtPath({\n                                                    treeData: state.qp,\n                                                    path : extendedNode.path,\n                                                    getNodeKey : ({treeIndex}) => {\n                                                            return treeIndex;\n                                                        },\n                                                    newNode: { qno : name , marks : extendedNode.node.marks , expanded : extendedNode.node.expanded , children : extendedNode.node.children }\n                                                }),\n                                            }));\n                                        }}\n                                    />\n                                    {extendedNode.node.qno!=='qp'&&\n                                    <input\n                                    placeholder = 'marks'\n                                    style={{ fontSize: '1.1rem' }}\n                                    value={extendedNode.node.marks}\n                                    readOnly = {extendedNode.node.qno === 'qp'}\n                                    onChange={event => {\n                                      const value = event.target.value;\n                  \n                                      this.setState(state => (\n                                          {\n                                            qp: changeNodeAtPath({\n                                                    treeData: state.qp,\n                                                    path : extendedNode.path,\n                                                    getNodeKey : ({treeIndex}) => {\n                                                            return treeIndex;\n                                                        },\n                                                    newNode: { qno : extendedNode.node.qno , marks : value , expanded : extendedNode.node.expanded , children : extendedNode.node.children }\n                                                }),\n                                            }));\n                                        }}\n                                    />}\n                                    </div>\n                                ),\n                                buttons: extendedNode.node.qno!=='qp'?[this.renderAddButton(extendedNode.node, extendedNode.path), this.renderDeleteButton(extendedNode)]:[this.renderAddButton(extendedNode.node, extendedNode.path)]\n                            })}\n\n                        />\n                    </div>\n                    {/* <Modal isOpen = {this.state.popup} toggle = {this.togglePopup}>\n                        <ModalHeader toggle = {this.togglePopup}>\n                            Final Question Paper\n                        </ModalHeader>\n\n                        <ModalBody>\n                            <JSONViewer json={this.state.finalQp}/>\n                            <JSONTree data = {this.state.finalQp}/>\n                            <JSONPretty data={this.state.finalQp}/>\n                        </ModalBody>\n                        <ModalFooter>\n                            Question Paper structure can still be changed! Question paper structure generated last will be submitted when test is created.\n                        </ModalFooter>\n                    </Modal> */}\n                    <label>Upload Submissions zip file : </label>\n                    <Input type=\"file\" name=\"zipfile\" accept = '.zip,.rar' required = {true} value={this.state.zipfile} onChange={this.handleDataChange}/>\n                    <Button color=\"primary\" onClick={this.createQp}>Create Test</Button>\n                </Form>\n            </div>\n            </div>\n        );\n    }\n\n}\n\nexport default TestCreationPage;","import React, { Component } from \"react\";\nimport axios from \"./axiosConfig\";\nimport { Card, Toast } from 'react-bootstrap'\nimport \"./index.css\"\n\nexport default class DashboardSectionComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: this.props.data,\n            type: this.props.type,\n            clickHandler: this.props.clickHandler,\n            populateData: this.props.populateData,\n            toastHandler: this.props.toastHandler,\n        }\n\n        this.deleteBtn = this.deleteBtn.bind(this);\n\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // if(props === state)\n\n        let newState = {\n            data: props.data,\n            type: props.type,\n            clickHandler: props.clickHandler\n        }\n        return newState\n    }\n\n    deleteBtn(event) {\n        const capitalize = (s) => {\n            if (typeof s !== 'string') return ''\n            return s.charAt(0).toUpperCase() + s.slice(1)\n          }\n        event.stopPropagation();\n        axios.delete('/api/' + this.state.type + 's/' + this.state.data.id.toString() + '/')\n            .then((res) => {\n                // console.log(res);\n                if (res.status < 300 && res.status > 199) {\n                    this.state.toastHandler([\"Deleted\",capitalize(this.state.type), this.state.data.id.toString()]);\n                    this.state.populateData();\n                    // window.alert(this.state.type + ' deleted !');\n                    \n                }\n                else {\n                    window.alert(res.message);\n                    console.log(res);\n                }\n            });\n    }\n\n    render() {\n        \n        // return <div className=\"dashboard-section\" onClick={(e) => { this.state.clickHandler(this.state.data) }}>\n        //             {this.state.data.name}\n        //             <img \n        //                 src='/delete-24px.svg' \n        //                 alt=\"del logo\" \n        //                 style={{ float : 'right' , marginRight : '10px' , marginTop : '10px'}}\n        //                 onClick={this.deleteBtn}\n        //                 />\n        //         </div>>\n        //     bg={variant.toLowerCase()}\n        //     text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\n        //     style={{ width: '10rem', height : '10rem' , margin : '3rem', lineHeight : '10rem'}}\n        //     >\n        //         <img src=\"/delete-24px.svg\"/>\n        //     <Card.Text>{this.state.data.name}</Card.Text>\n\n        // </Card>;\n        let variant = 'dark'\n        return <div onClick={(e) => { this.state.clickHandler(this.state.data) }}>\n            <Card bg={variant.toLowerCase()}\n                text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\n                // style={{ width: '10rem', height : '10rem' , margin : '3rem', lineHeight : '10rem'}}\n                style={{ width: '13rem', margin: '2rem', borderRadius: '20px', height: '10rem' }}>\n\n                <Card.Img style={{ position: \"relative\" }} variant=\"top\" className=\"img-card img-card-small\" />\n                <div className=\"blue-circle-icon\">\n                    <img src={\"/icons8-delete-bin-24-white.png\"}\n                        alt=\"live-icon\"\n                        className=\"icon-tag\"\n                        onClick={this.deleteBtn} />\n                </div>\n\n                <Card.Body style={{ borderRadius: '5px' }}>\n                    <Card.Text style={{\n                        fontSize: '1rem',\n                        fontWeight: 'normal',\n                        fontStretch: 'normal',\n                        fontStyle: 'normal',\n                        lineHeight: '7rem',\n                        letterSpacing: 'normal',\n                        textAlign: 'center'\n                    }}>\n                        {this.state.data.name}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n            {/* {this.state.data.map((obj) => <DashboardSectionComponent data={obj} type={this.state.availableTypes[this.state.curType]} clickHandler={this.clickhandler} populateData={this.populateData} />)} */}\n\n\n\n           \n        </div>\n    }\n}","import React, { Component } from \"react\";\nimport { ReactSession } from \"react-client-session\";\nimport { withRouter } from \"react-router-dom\";\nimport MyJumbotron from \"./MyJumbotron\";\nimport DashboardSectionComponent from \"./DashboardSectionComponent\";\nimport axios from \"./axiosConfig\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader, Form, Input } from \"reactstrap\";\nimport { Toast } from 'react-bootstrap'\n\nimport FormData from \"form-data\";\n\nclass DashboardPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            profName: ReactSession.get('userdata')['name'],\n            // courseName: undefined,\n            // courseId: undefined,\n            // testName: undefined,\n            // testId: undefined,\n            // courseSelected: false,\n            curType: 0,\n            availableTypes: ['course', 'test', 'submission'],\n            selectedFields: [],\n            data: [''],\n            popup: false,\n            toasts: [],\n\n        }\n\n        if (props.location.state !== undefined) {\n            // let newCurType = props.location.state.curType;\n            // let newSelectedFields = props.location.state.selectedFields.map(x=>x);\n            // let newData = props.location.state.data;\n            this.state.curType = props.location.state.curType;\n            this.state.selectedFields = props.location.state.selectedFields.map(x => x);\n            this.state.data = props.location.state.data;\n            // props.location.state = undefined;\n            // this.setState({\n            //     curType : newCurType,\n            //     selectedFields : newSelectedFields,\n            //     data : newData\n            // },()=>{\n            //    console.log('setstate') \n            // });\n\n        }\n\n        this.togglePopup = this.togglePopup.bind(this);\n        this.clickhandler = this.clickhandler.bind(this);\n        this.populateData = this.populateData.bind(this);\n        this.goBack = this.goBack.bind(this);\n        this.addBtnHandler = this.addBtnHandler.bind(this);\n        this.addCourseBtn = this.addCourseBtn.bind(this);\n        this.toastHandler = this.toastHandler.bind(this);\n    }\n\n    toastHandler(data) {\n        this.setState((prevState) => {\n            let newToasts = prevState.toasts.map(x => x)\n            newToasts.push(data)\n            return {\n\n                toasts: newToasts\n            }\n        });\n\n    }\n\n    clickhandler(data) {\n        this.setState((prevState) => {\n            let newSelectedfields = prevState.selectedFields.map(x => x)\n            newSelectedfields.push(data)\n            return {\n                curType: prevState.curType + 1,\n                selectedFields: newSelectedfields\n            }\n        }, () => {\n            if (this.state.curType === 3) {\n                this.props.history.push({\n                    pathname: '/grading',\n                    state: this.state,\n                    data: data\n                });\n            }\n            else {\n                this.props.history.replace('/', this.state)\n                this.populateData();\n            }\n        });\n\n    }\n\n    populateData() {\n        axios.get('/api/' + this.state.availableTypes[this.state.curType] + 's', {\n            params: {\n                [this.state.availableTypes[this.state.curType - 1]]: this.state.selectedFields.length != 0 ? this.state.selectedFields[this.state.selectedFields.length - 1].id : null\n            }\n        })\n            .then(res => {\n                this.setState({ data: res.data })\n                console.log(res.data);\n            })\n    }\n    componentDidMount() {\n        this.populateData();\n    }\n\n    goBack() {\n        this.setState((prevState) => {\n            let newSelectedfields = prevState.selectedFields.map(x => x);\n            newSelectedfields.pop()\n            return {\n                curType: prevState.curType - 1,\n                selectedFields: newSelectedfields\n            }\n        }, () => {\n            this.props.history.replace('/', this.state)\n            this.populateData();\n        });\n    }\n\n    addBtnHandler() {\n        if (this.state.curType === 0) {\n            this.togglePopup();\n        }\n        else if (this.state.curType === 1) {\n            this.props.history.push({\n                pathname: '/test-creation',\n                state: this.state\n            });\n        }\n        else {\n            //still in development\n        }\n    }\n\n    togglePopup() {\n        this.setState(prevState => { return { popup: !prevState.popup } });\n    }\n\n    addCourseBtn() {\n\n        let formData = new FormData(document.getElementById('courseForm'));\n\n        axios.post('/api/courses/', formData)\n            .then(res => {\n                if (res.status < 300 && res.status > 199) {\n                    this.togglePopup();\n                    this.populateData();\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    render() {\n        console.log(this.state.data)\n        return (\n            <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{\n                    position: 'relative',\n                    minHeight: '100px',\n                }}>\n                <MyJumbotron state={this.state} history={this.props.history} goBack={this.goBack} addBtnHandler={this.addBtnHandler} dontRenderButton={this.state.curType == 2} />\n                <div className=\"dashboard\">\n                    {this.state.data.map((obj) => <DashboardSectionComponent data={obj}\n                        type={this.state.availableTypes[this.state.curType]}\n                        clickHandler={this.clickhandler} populateData={this.populateData}\n                        toastHandler={this.toastHandler}\n                    />)}\n                </div>\n                <Modal isOpen={this.state.popup}>\n                    <ModalHeader>\n                        Add a new Course\n                        </ModalHeader>\n                    <ModalBody>\n                        <Form id=\"courseForm\">\n                            <Input type=\"text\" name=\"course_id\" placeholder=\"Course ID\" />\n                            <Input type=\"text\" name=\"name\" placeholder=\"Course Name\" />\n                            <Input type=\"text\" name=\"offering_dept\" placeholder=\"Department Offering\" />\n                        </Form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button type=\"button\" color=\"danger\" onClick={this.togglePopup}>Cancel</Button>\n                        <Button type=\"button\" color=\"primary\" onClick={this.addCourseBtn}>Add</Button>\n                    </ModalFooter>\n                </Modal>\n                <div\n                    style={{\n                        position: 'absolute',\n                        top: \"5rem\",\n                                right: \"2rem\",\n                    }}>\n                    {\n\n                        this.state.toasts.map((obj, index) => <Toast onClose={() =>\n                            this.setState((prevState) => {\n                                let newToasts = prevState.toasts.map(x => x)\n                                newToasts.splice(index, 1)\n                                return {\n\n                                    toasts: newToasts\n                                }\n                            })}  \n\n                            show={true} delay={3000} autohide\n                            >\n                            <Toast.Header>\n                                <img\n                                    src=\"holder.js/20x20?text=%20\"\n                                    className=\"rounded mr-2\"\n                                    alt=\"\"\n                                />\n                                <strong className=\"mr-auto\">{obj[0] + \" \" + obj[1]}</strong>\n                                {/* <small>11 mins ago</small> */}\n                            </Toast.Header>\n                            <Toast.Body style={{ paddingLeft: \"1.5rem\" }}>{obj[1] + \" ID : \" + obj[2]}</Toast.Body>\n                        </Toast>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DashboardPage);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Redirect, Route,Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-sortable-tree/style.css';\n\nimport GradingPage from \"./Components/GradingPage\";\nimport LoginPage from \"./Components/LoginPage\";\n// import LoginPage2 from \"./Components/LoginPage2\";\nimport TestCreationPage from \"./Components/TestCreationPage\";\nimport DashboardPage from \"./Components/DashboardPage\";\n\nimport {ReactSession} from 'react-client-session';\n\nclass App extends Component {\n\n  constructor(props){\n    \n    super(props);\n\n  }\n\n  render() {\n\n    ReactSession.setStoreType(\"localStorage\");\n\n    return (\n      <Router>\n        <Switch>\n          <PrivateRoute path=\"/grading\" component={GradingPage} />\n          <PrivateRoute path=\"/test-creation\" component={TestCreationPage} />\n          <LoginRoute path=\"/login\" component={LoginPage} />\n          {/* <Route exact path=\"/login2\" component={LoginPage2} /> */}\n          <PrivateRoute exact path=\"/\" component={DashboardPage} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nfunction LoginRoute(props){\n      return isLoggedIn() ?\n            <Redirect to='/'/> : \n            <Route exact path={props.path} component={props.component}/>\n}\n\nfunction PrivateRoute(props){\n    return isLoggedIn() ? \n            <Route exact path={props.path} component={props.component}/> : \n            <Redirect to='/login'/>\n}\n\nfunction isLoggedIn()\n{\n    return ReactSession.get('userdata') !== undefined;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}